// Copyright (C) 2020 T. Zachary Laine
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Warning! This file is autogenerated.
#include <boost/text/normalize_algorithm.hpp>

#include <string>
#include <vector>

#include <gtest/gtest.h>

#include "ill_formed.hpp"


template<typename T>
using erase_from = decltype(boost::text::v2::erase(
    std::declval<T &>(),
    std::declval<T &>().begin(),
    std::declval<T &>().end()));

#if 0
static_assert(well_formed<erase_from, std::string>::value, "");
static_assert(well_formed<erase_from, std::wstring>::value, "");
static_assert(well_formed<erase_from, std::vector<char>>::value, "");
static_assert(well_formed<erase_from, std::vector<short>>::value, "");
static_assert(ill_formed<erase_from, std::vector<int>>::value, "");
#endif

TEST(normalization_algorithm, erase)
{
    std::string str;
    boost::text::v2::erase<boost::text::nf::c>(str, str.begin(), str.end());
}
